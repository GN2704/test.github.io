Build a single-file Household Monthly Budget Planner web app.

Requirements:
- Deliver a single index.html file that includes HTML, CSS, and JavaScript in one file (no build step, no external frameworks).
- Include Chart.js via CDN only (do not embed or inline the full library). If offline fallback is needed, I will add the minified Chart.js manually later.
- Must work offline after initial load (except for the Chart.js CDN).

Design and Style:
- Minimalist design with light colors and soft pink accents for headers, totals, and charts.
- Use rounded cards, light borders, and subtle shadows.
- Clean, easy-to-read tables and charts.
- Responsive layout that works on desktop and mobile.

Layout:
- Header row: left text logo “Budget Mate”, center dropdown selector for Month, right large card showing “Amount Left to Spend”.
- Under the header, five small cards showing totals for: Income, Bills, Expenses, Debt, Savings.
- Charts section with three charts:
  1. Income Summary (pie chart)
  2. Cash Flow Summary (pie chart)
  3. Budget vs Actual (bar chart)
- Editable tables (add/remove rows, inline edit):
  - Overview: Start Date, End Date, Start Balance, Carry-over from previous month
  - Cash Flow Summary: Category, Budget, Actual, Left
  - Income Summary: Category, Budget, Actual
  - Bills Summary: Name, Due Date, Budget, Actual, Left, Paid checkbox
  - Expenses Summary: Category, Budget, Actual, Left
  - Debt Summary: Creditor, Min Due, Budget, Actual, Left, Paid checkbox

Behavior & Logic:
- All numeric fields start at 0 (reset template).
- Currency symbol should be set to EURO (€).
- Editing values updates totals and the “Amount Left to Spend” automatically.
- Charts update instantly when table data changes.
- Adding/removing rows updates totals and charts immediately.
- Carry-over from previous month is applied automatically to Start Balance on load.
- Paid checkboxes adjust outstanding totals.

Persistence & Import/Export:
- Buttons: Save, Load, Duplicate Month, Clear.
- Save data in localStorage keyed by month/year.
- Import/Export JSON for full data.
- Export CSV for each table separately.

UX & Accessibility:
- Tables must be editable in-browser.
- Tab navigates cells, Enter adds a new row in the focused table.
- Mobile: layout stacks vertically; charts shown prominently.
- Print stylesheet: hides controls and shows a tidy A4/Letter formatted summary.

Code Quality:
- No console errors or uncaught exceptions.
- Use semantic HTML.
- Organize code clearly with comments: layout (HTML), styles (CSS), state & calculations (JS), charts (Chart.js), storage & I/O.
- Performance for reasonable row counts (e.g., ~200 rows total).
- Include short usage instructions as comments at the top of the file.

Deliverable:
- Single index.html file, fully functional, ready to open in modern browsers and usable offline after initial load (Chart.js loaded via CDN).
